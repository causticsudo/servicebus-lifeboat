name: Build Tests and Publish .NET Core

on:
  pull_request:
    branches:
      - '*'

env:
  Solution_Name: ServiceBusLifeboat
  Unit_Tests_Working_Directory: ./tests/ServiceBusLifeboat.UnitTests
  App_Working_Directory: ./src/ServiceBusLifeboat.Cli

jobs:

  # Build, Unit Tests, Coverage Report
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get version from GitVersion.yml 
        id: get_version
        run: echo "::set-output name=version::$(cat .github/GitVersion.yml | yq -r .version)"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Restore dependencies
        run: dotnet restore

      - name: Run dotnet build
        run: dotnet build

      - name: Run dotnet tests and generate coverage reports
        working-directory: ${{env.Unit_Tests_Working_Directory}}
        run: dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings

      - name: Publish coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: ${{env.Unit_Tests_Working_Directory}}/TestResults/

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate HTML coverage report
        run: reportgenerator "-reports:${{env.Unit_Tests_Working_Directory}}/TestResults/**/coverage.cobertura.xml" "-targetdir:coverage" "-reporttypes:Html"

  # Pull request analysis with sonarcloud
  quality-gate:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: SonarCloud pull request begin scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner begin /k:"causticsudo_servicebus-lifeboat" /d:sonar.login="${{ env.SONAR_TOKEN }}" /o:"servicebus-lifeboat" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.pullrequest.branch="${{ github.event.pull_request.head.ref }}" /d:sonar.pullrequest.base="${{ github.event.pull_request.base.ref }}" /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Test
        run: |
          dotnet build
          dotnet test --collect:"XPlat Code Coverage" --settings ${{env.Unit_Tests_Working_Directory}}/coverlet.runsettings

      - name: SonarCloud pull request end scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"

  # Publish windows-linux binaries unstable version
  publish-unstable:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'

    steps:
    - name: Prompt for publish confirmation
      id: confirm_publish
      uses: openai/action-confirm@v1
      with:
        question: "Do you want to proceed with the publish job?"
        continue-on: "yes"

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Run dotnet publish for Windows
      working-directory: ../${{env.App_Working_Directory}}
      run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish/windows -r win-x64 -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:Version=${{ steps.get_version.outputs.version }}

    - name: Run dotnet publish for Linux
      working-directory: ../${{env.App_Working_Directory}}
      run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish/linux -r linux-x64 -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:Version=${{ steps.get_version.outputs.version }}

    - name: Upload linux binary artifact
      uses: actions/upload-artifact@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{env.Solution_Name}}_linux
        path: ${{env.DOTNET_ROOT}}/publish/linux/

    - name: Upload windows binary artifact
      uses: actions/upload-artifact@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{env.Solution_Name}}_windows
        path: ${{env.DOTNET_ROOT}}/publish/windows/
