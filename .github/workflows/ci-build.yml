name: Build Tests and Publish .NET Core

on:
  push:
    branches-ignore:
      - '!hotfix/*'
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      Solution_Name: ServiceBusLifeboat
      Unit_Tests_Working_Directory: ./tests/ServiceBusLifeboat.UnitTests
      App_Working_Directory: ./src/ServiceBusLifeboat.Cli

    steps:
      # Make code checkout
      - name: Checkout
        uses: actions/checkout@v2

      # Create version from .git/GitVersion.yml
      - name: Get version from GitVersion.yml 
        id: get_version
        run: echo "::set-output name=version::$(cat .github/GitVersion.yml | yq -r .version)"

      # Setup an especific dotnet version
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      # Restore all dependencies from solution
      - name: Restore dependencies
        run: dotnet restore

      # Compile all projects using solution
      - name: Run dotnet build
        run: dotnet build

      # Run unit tests from unit tests csproj and generate coverage reports
      - name: Run dotnet tests and generate coverage reports
        working-directory: ${{env.Unit_Tests_Working_Directory}}
        run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat="opencover%2ccobertura" /p:CoverletOutput=./TestResults/

      # Publish coverage reports as artifacts
      - name: Publish coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: coverage-reports
          path: ${{env.Unit_Tests_Working_Directory}}/TestResults/

      # Install ReportGenerator tool
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Generate HTML report using ReportGenerator
      - name: Generate HTML coverage report
        run: reportgenerator "-reports:${{env.Unit_Tests_Working_Directory}}/TestResults/coverage.cobertura.xml" "-targetdir:coverage" "-reporttypes:Html"

      #  Publish to windows x64
      - name: Run dotnet publish for Windows
        working-directory: ${{env.App_Working_Directory}}
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish/windows -r win-x64 -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:Version=${{ steps.get_version.outputs.version }}

      #  Publish to linux x64
      - name: Run dotnet publish for Linux
        working-directory: ${{env.App_Working_Directory}}
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish/linux -r linux-x64 -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:Version=${{ steps.get_version.outputs.version }}

      # Upload linux artfact
      - name: Upload linux binary artifact
        uses: actions/upload-artifact@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{env.Solution_Name}}_linux
          path: ${{env.DOTNET_ROOT}}/publish/linux/

      # Upload windows artfact
      - name: Upload windows binary artifact
        uses: actions/upload-artifact@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{env.Solution_Name}}_windows
          path: ${{env.DOTNET_ROOT}}/publish/windows/
