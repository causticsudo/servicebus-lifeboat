name: Upload artifact | Create Release

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      Solution_Name: ServiceBusLifeboat
      App_Working_Directory: ./src/ServiceBusLifeboat.Cli

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get version from GitVersion.yml
        id: get_version
        run: echo "::set-output name=version::$(cat .github/GitVersion.yml | yq -r .version)"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SBLBOAT_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Run dotnet publish for Windows
        working-directory: ${{env.App_Working_Directory}}
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish/windows -r win-x64 -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:Version=${{ steps.get_version.outputs.version }}
      - name: Zip win-x64
        run: (cd ${{env.DOTNET_ROOT}}/publish/windows ; zip -r ${{env.Solution_Name}}_win-x64 *)

      - name: Run dotnet publish for Linux
        working-directory: ${{env.App_Working_Directory}}
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/publish/linux -r linux-x64 -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true -p:Version=${{ steps.get_version.outputs.version }}
      - name: Zip linux-x64
        run: (cd ${{env.DOTNET_ROOT}}/publish/linux ; zip -r ${{env.Solution_Name}}_linux-x64 *)

      - name: Upload linux binary artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SBLBOAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{env.DOTNET_ROOT}}/publish/linux/${{env.Solution_Name}}_linux-x64.zip
          asset_name: ${{env.Solution_Name}}_linux-x64.zip
          asset_content_type: application/zip

      - name: Upload windows binary artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SBLBOAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{env.DOTNET_ROOT}}/publish/windows/${{env.Solution_Name}}_win-x64.zip
          asset_name: ${{env.Solution_Name}}_windows-x64.zip
          asset_content_type: application/zip
